{"code":"import * as bunyan from 'bunyan';\r\nimport * as _ from 'lodash';\r\nimport { LogUtils } from '@logging/util';\r\nclass StructLog {\r\n    constructor(name, options = {}) {\r\n        this.name = name;\r\n        this.debug = this.getEmitter(bunyan.DEBUG);\r\n        this.info = this.getEmitter(bunyan.INFO);\r\n        this.warn = this.getEmitter(bunyan.WARN);\r\n        this.error = this.getEmitter(bunyan.ERROR);\r\n        this.critical = this.getEmitter(bunyan.FATAL);\r\n        this.logger = this.getLogger(options);\r\n    }\r\n    bind(bindings) {\r\n        this.logger = this.logger.child(bindings);\r\n        return this;\r\n    }\r\n    close() {\r\n    }\r\n    getEmitter(level = bunyan.DEBUG) {\r\n        const self = this;\r\n        const levelName = bunyan.nameFromLevel[level];\r\n        return function emit() {\r\n            const entry = self.parseLogArgs(Array.from(arguments));\r\n            const { event, err, details, limitOutput, bindings, } = entry;\r\n            self.logger[levelName](Object.assign({ err, details, limitOutput }, bindings), event);\r\n            return self;\r\n        };\r\n    }\r\n    getLogger(options) {\r\n        return bunyan.createLogger(Object.assign({\r\n            name: this.name,\r\n            level: LogUtils.getSystemLogLevel(),\r\n            serializers: Object.assign({}, (options.serializers || {})),\r\n            streams: options.streams || [{\r\n                    type: 'raw',\r\n                    stream: process.stdout,\r\n                }],\r\n        }, (options.bindings || {})));\r\n    }\r\n    parseLogArgs(args) {\r\n        const result = { event: '', level: '' };\r\n        args.forEach((arg) => {\r\n            if (_.isNumber(arg) || _.isString(arg)) {\r\n                if (result.event) {\r\n                    result.details = arg;\r\n                }\r\n                else {\r\n                    result.event = arg;\r\n                }\r\n            }\r\n            if (arg === true || arg === false) {\r\n                result.limitOutput = arg;\r\n            }\r\n            if (_.isObject(arg)) {\r\n                if (arg instanceof Error) {\r\n                    result.err = arg;\r\n                }\r\n                else if (result.details) {\r\n                    result.bindings = arg;\r\n                }\r\n                else {\r\n                    result.details = arg;\r\n                }\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n}\r\nexport { StructLog };\r\n//# sourceMappingURL=logger.js.map","references":["/home/bradodarb/_git/wavelength/wavelength-js/node_modules/@types/bunyan/index.d.ts","/home/bradodarb/_git/wavelength/wavelength-js/node_modules/@types/bunyan/index.d.ts","/home/bradodarb/_git/wavelength/wavelength-js/node_modules/@types/lodash/index.d.ts","/home/bradodarb/_git/wavelength/wavelength-js/src/logging/util.ts","/home/bradodarb/_git/wavelength/wavelength-js/src/util/type-utils.ts"],"map":"{\"version\":3,\"file\":\"logger.js\",\"sourceRoot\":\"/\",\"sources\":[\"logging/logger.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/bradodarb/_git/wavelength/wavelength-js/logging/logger.d.ts","writeByteOrderMark":false,"text":"import Logger from \"bunyan\";\r\nimport { ILogger, ILogEmitter, ILogItem } from '@logging/util';\r\nimport { IIndexed } from '@util/type-utils';\r\ndeclare class StructLog implements ILogger {\r\n    name: string;\r\n    debug: ILogEmitter;\r\n    info: ILogEmitter;\r\n    warn: ILogEmitter;\r\n    error: ILogEmitter;\r\n    critical: ILogEmitter;\r\n    logger: Logger & IIndexed;\r\n    constructor(name: string, options?: any);\r\n    bind(bindings: object): StructLog;\r\n    close(): void;\r\n    protected getEmitter(level?: number): () => this;\r\n    protected getLogger(options: any): Logger;\r\n    protected parseLogArgs(args: any[]): ILogItem;\r\n}\r\nexport { StructLog, ILogger, ILogEmitter, ILogItem };\r\n"}}
