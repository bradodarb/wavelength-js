{"code":"import { isString } from 'lodash';\r\nclass HandlerState {\r\n    constructor(name, event, context, logger) {\r\n        this.name = name;\r\n        this.event = event;\r\n        this.context = context;\r\n        this.logger = logger;\r\n    }\r\n    push(value) {\r\n        Object.assign(this, value);\r\n    }\r\n    pop(value) {\r\n        let result = null;\r\n        if (isString(value)) {\r\n            result = this[value];\r\n            delete this[value];\r\n        }\r\n        else {\r\n            Object.keys(this).forEach((key) => {\r\n                if (this[key] === value) {\r\n                    result = this[key];\r\n                    delete this[key];\r\n                }\r\n            });\r\n        }\r\n        return result;\r\n    }\r\n}\r\nexport { HandlerState };\r\n//# sourceMappingURL=handler-state.js.map","references":["/home/bradodarb/_git/wavelength/wavelength-js/node_modules/@types/lodash/index.d.ts","/home/bradodarb/_git/wavelength/wavelength-js/src/logging/util.ts"],"map":"{\"version\":3,\"file\":\"handler-state.js\",\"sourceRoot\":\"/\",\"sources\":[\"runtime/handler-state.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAC,QAAQ,EAAC,MAAM,QAAQ,CAAC;AAwBhC,MAAM,YAAY;IAQd,YAAY,IAAY,EAAE,KAAQ,EAAE,OAAU,EAAE,MAAe;QAC3D,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IAEzB,CAAC;IAED,IAAI,CAAC,KAAa;QACd,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IAC/B,CAAC;IAED,GAAG,CAAC,KAAsB;QACtB,IAAI,MAAM,GAAG,IAAI,CAAC;QAElB,IAAI,QAAQ,CAAC,KAAK,CAAC,EAAE;YACjB,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC;YACrB,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC;SACtB;aAAM;YACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;gBAC9B,IAAI,IAAI,CAAC,GAAG,CAAC,KAAK,KAAK,EAAE;oBACrB,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;oBACnB,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC;iBACpB;YACL,CAAC,CAAC,CAAC;SACN;QACD,OAAO,MAAM,CAAC;IAClB,CAAC;CACJ;AAGD,OAAO,EAAgB,YAAY,EAAC,CAAA\"}","dts":{"name":"/home/bradodarb/_git/wavelength/wavelength-js/runtime/handler-state.d.ts","writeByteOrderMark":false,"text":"import { ILogger } from \"@logging/util\";\r\ninterface IHandlerState<E extends Object, C extends Object> {\r\n    name: string;\r\n    event: E;\r\n    context: C;\r\n    logger: ILogger;\r\n    [propName: string]: any;\r\n    /**\r\n     * Adds entries to state tree\r\n     * @param value - should be an object literal that can be applied to this state object\r\n     */\r\n    push(value: Object): void;\r\n    /**\r\n     * Removes an entry from the state tree\r\n     * @param value - Either a string to remove by key or an object to search for on state tree to remove\r\n     */\r\n    pop(value: string | Object): any;\r\n}\r\ndeclare class HandlerState<E, C> implements IHandlerState<E, C> {\r\n    name: string;\r\n    event: E;\r\n    context: C;\r\n    logger: ILogger;\r\n    [propName: string]: any;\r\n    constructor(name: string, event: E, context: C, logger: ILogger);\r\n    push(value: Object): void;\r\n    pop(value: string | Object): any;\r\n}\r\nexport { IHandlerState, HandlerState };\r\n"}}
