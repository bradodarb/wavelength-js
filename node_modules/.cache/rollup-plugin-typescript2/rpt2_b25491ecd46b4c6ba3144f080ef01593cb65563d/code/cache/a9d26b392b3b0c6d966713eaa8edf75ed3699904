{"code":"/** @module logging-utils */\r\nimport * as bunyan from 'bunyan';\r\nimport * as _ from 'lodash';\r\nconst LOG_LEVEL_MAP = {\r\n    [bunyan.TRACE.toString()]: 'trace',\r\n    [bunyan.DEBUG.toString()]: 'debug',\r\n    [bunyan.INFO.toString()]: 'info',\r\n    [bunyan.ERROR.toString()]: 'error',\r\n    [bunyan.FATAL.toString()]: 'fatal',\r\n};\r\nconst REVERSED_LOG_LEVEL_MAP = {\r\n    trace: bunyan.TRACE,\r\n    debug: bunyan.DEBUG,\r\n    info: bunyan.INFO,\r\n    error: bunyan.ERROR,\r\n    fatal: bunyan.FATAL,\r\n};\r\nclass LogUtils {\r\n    /**\r\n     * Attempts to set the system log level from an ENV VAR ($LOG_LEVEL)\r\n     * The Var can be a string representation of the level name or a numeric-like string\r\n     * If the ENV VAR is not present sets to DEBUG as the default\r\n     * @returns {number}\r\n     */\r\n    static getSystemLogLevel() {\r\n        if (!process.env.LOG_LEVEL) {\r\n            return bunyan.DEBUG;\r\n        }\r\n        try {\r\n            const numericLevel = LogUtils.getNumericLogLevel();\r\n            if (numericLevel) {\r\n                return numericLevel;\r\n            }\r\n            if (process.env.LOG_LEVEL) {\r\n                const level = process.env.LOG_LEVEL;\r\n                return bunyan.levelFromName[level];\r\n            }\r\n            return bunyan.DEBUG;\r\n        }\r\n        catch (e) {\r\n            console.error('Problem parsing log level', e);\r\n        }\r\n        return bunyan.DEBUG;\r\n    }\r\n    /**\r\n     * Attempts to convert a numeric-like string to a log level\r\n     * @returns {number}\r\n     */\r\n    static getNumericLogLevel() {\r\n        if (process.env.LOG_LEVEL) {\r\n            const level = parseInt(process.env.LOG_LEVEL, 10);\r\n            if (_.isFinite(level)) {\r\n                if (bunyan.nameFromLevel[level]) {\r\n                    return level;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Attempts to set the system log entry max length from an ENV VAR (MAX_LOG_LENGTH)\r\n     * If the ENV VAR is not present sets to 20000 as the default\r\n     * @returns {number}\r\n     */\r\n    static getMaxLogLength() {\r\n        let maxLength = 20000;\r\n        if (process.env.MAX_LOG_LENGTH) {\r\n            const check = parseInt(process.env.MAX_LOG_LENGTH, 10);\r\n            if (_.isFinite(check)) {\r\n                maxLength = check;\r\n            }\r\n        }\r\n        return maxLength;\r\n    }\r\n}\r\nexport { LogUtils, LOG_LEVEL_MAP, REVERSED_LOG_LEVEL_MAP };\r\n//# sourceMappingURL=util.js.map","references":["/home/bradodarb/_git/wavelength/wavelength-js/node_modules/@types/bunyan/index.d.ts","/home/bradodarb/_git/wavelength/wavelength-js/node_modules/@types/lodash/index.d.ts","/home/bradodarb/_git/wavelength/wavelength-js/src/util/type-utils.ts"],"map":"{\"version\":3,\"file\":\"util.js\",\"sourceRoot\":\"/\",\"sources\":[\"logging/util.ts\"],\"names\":[],\"mappings\":\"AAAA,4BAA4B;AAG5B,OAAO,KAAK,MAAM,MAAM,QAAQ,CAAC;AACjC,OAAO,KAAK,CAAC,MAAM,QAAQ,CAAC;AAG5B,MAAM,aAAa,GAAG;IAClB,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,EAAE,OAAO;IAClC,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,EAAE,OAAO;IAClC,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,EAAE,MAAM;IAChC,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,EAAE,OAAO;IAClC,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,EAAE,OAAO;CACrC,CAAC;AAEF,MAAM,sBAAsB,GAAa;IACrC,KAAK,EAAE,MAAM,CAAC,KAAK;IACnB,KAAK,EAAE,MAAM,CAAC,KAAK;IACnB,IAAI,EAAE,MAAM,CAAC,IAAI;IACjB,KAAK,EAAE,MAAM,CAAC,KAAK;IACnB,KAAK,EAAE,MAAM,CAAC,KAAK;CACtB,CAAC;AAGF,MAAM,QAAQ;IACV;;;;;OAKG;IACH,MAAM,CAAC,iBAAiB;QAEpB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE;YACxB,OAAO,MAAM,CAAC,KAAK,CAAC;SACvB;QACD,IAAI;YACA,MAAM,YAAY,GAAG,QAAQ,CAAC,kBAAkB,EAAE,CAAC;YACnD,IAAI,YAAY,EAAE;gBACd,OAAO,YAAY,CAAC;aACvB;YACD,IAAI,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE;gBACvB,MAAM,KAAK,GAAiD,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC;gBAClF,OAAO,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,CAAA;aACrC;YACD,OAAO,MAAM,CAAC,KAAK,CAAC;SACvB;QAAC,OAAO,CAAC,EAAE;YACR,OAAO,CAAC,KAAK,CAAC,2BAA2B,EAAE,CAAC,CAAC,CAAC;SACjD;QACD,OAAO,MAAM,CAAC,KAAK,CAAC;IACxB,CAAC;IAED;;;OAGG;IACH,MAAM,CAAC,kBAAkB;QAErB,IAAI,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE;YACvB,MAAM,KAAK,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YAClD,IAAI,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;gBACnB,IAAI,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,EAAE;oBAC7B,OAAO,KAAK,CAAC;iBAChB;aACJ;SACJ;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;;;OAIG;IACH,MAAM,CAAC,eAAe;QAClB,IAAI,SAAS,GAAG,KAAK,CAAC;QACtB,IAAI,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE;YAC5B,MAAM,KAAK,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC;YACvD,IAAI,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;gBACnB,SAAS,GAAG,KAAK,CAAC;aACrB;SACJ;QACD,OAAO,SAAS,CAAC;IACrB,CAAC;CACJ;AAuCD,OAAO,EAAU,QAAQ,EAAuE,aAAa,EAAE,sBAAsB,EAAC,CAAA\"}","dts":{"name":"/home/bradodarb/_git/wavelength/wavelength-js/logging/util.d.ts","writeByteOrderMark":false,"text":"/** @module logging-utils */\r\nimport { IIndexed } from \"@util/type-utils\";\r\ndeclare const LOG_LEVEL_MAP: {\r\n    [x: string]: string;\r\n};\r\ndeclare const REVERSED_LOG_LEVEL_MAP: IIndexed;\r\ndeclare class LogUtils {\r\n    /**\r\n     * Attempts to set the system log level from an ENV VAR ($LOG_LEVEL)\r\n     * The Var can be a string representation of the level name or a numeric-like string\r\n     * If the ENV VAR is not present sets to DEBUG as the default\r\n     * @returns {number}\r\n     */\r\n    static getSystemLogLevel(): number;\r\n    /**\r\n     * Attempts to convert a numeric-like string to a log level\r\n     * @returns {number}\r\n     */\r\n    static getNumericLogLevel(): number | null;\r\n    /**\r\n     * Attempts to set the system log entry max length from an ENV VAR (MAX_LOG_LENGTH)\r\n     * If the ENV VAR is not present sets to 20000 as the default\r\n     * @returns {number}\r\n     */\r\n    static getMaxLogLength(): number;\r\n}\r\ndeclare type loggable = string | Object | number | boolean | Error;\r\ninterface ILogItem {\r\n    event: loggable;\r\n    level: string;\r\n    details?: loggable;\r\n    err?: loggable;\r\n    bindings?: Object;\r\n    limitOutput?: boolean;\r\n    maxLogLength?: number;\r\n    [propName: string]: any;\r\n}\r\ninterface ILogItemCollection {\r\n    items: ILogItem[];\r\n}\r\ninterface ILogEmitter {\r\n    (event: loggable, details?: loggable, error?: loggable, bindings?: Object): void;\r\n}\r\ninterface ILogItemFilter {\r\n    (record: ILogItem): ILogItem;\r\n}\r\ninterface ILogger {\r\n    name: string;\r\n    debug: ILogEmitter;\r\n    info: ILogEmitter;\r\n    warn: ILogEmitter;\r\n    error: ILogEmitter;\r\n    critical: ILogEmitter;\r\n    bind(bindings: object): ILogger;\r\n    close(): void;\r\n}\r\nexport { ILogger, LogUtils, loggable, ILogItem, ILogItemCollection, ILogItemFilter, ILogEmitter, LOG_LEVEL_MAP, REVERSED_LOG_LEVEL_MAP };\r\n"}}
